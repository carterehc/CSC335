// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yâ€“x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    /*Assignment: Project 2, CSC 335, Berea College
      Name: Emily Carter - cartere
      Date: 09/15/17
      Instructor: Mario Nakazawa*/
	
    //get 16 bit of 0
    Zero16(in=x, out[0]=z0, out[1]=z1, out[2]=z2,out[3]=z3,out[4]=z4,out[5]=z5,out[6]=z6,out[7]=z7,out[8]=z8,out[9]=z9,out[10]=z10,out[11]=z11,out[12]=z12,out[13]=z13,out[14]=z14,out[15]=z15); //you have to put every out put and name it zero0, zer1, etc	
	
	Mux16(a=x, b[0]=z0, b[1]=z1,b[2]=z2,b[3]=z3,b[4]=z4,b[5]=z5,b[6]=z6,b[7]=z7,b[8]=z8,b[9]=z9,b[10]=z10, b[11]=z11,b[12]=z12,b[13]=z13,b[14]=z14,b[15]=z15, sel=zx,out=zxx);  //x or zeros. b is zeros because if sel 1, then b
	
	Not16(in=zxx, out=notzxx);
	Mux16(a=zxx, b=notzxx, sel=nx, out=nxx);  //either reverse of zxx or zxx
	
	Mux16(a=y, b[0]=z0, b[1]=z1, b[2]=z2, b[3]=z3, b[4]=z4, b[5]=z5, b[6]=z6, b[7]=z7, b[8]=z8, b[9]=z9, b[10]=z10, b[11]=z11, b[12]=z12, b[13]=z13, b[14]=z14, b[15]=z15, sel=zy, out=zyy);  //y or zeros. b is zeros because if sel 1, then b
    Not16(in=zyy, out=notzyy);
	Mux16(a=zyy, b=notzyy, sel=ny, out=nyy);
	
	//Feed to f mux: x+y and x&y
	And16(a=nxx, b=nyy, out=xy);
	//Or16(a=nxx, b=nyy, out=xory); it's not an or, it's add
	
	FullAdder16(a=nxx, b=nyy, c=z0, carry=c1, sum=added);
	
	Mux16(a=xy, b=added, sel=f, out[0]=fout0, out[1]=fout1, out[2]=fout2, out[3]=fout3, out[4]=fout4, out[5]=fout5, out[6]=fout6, out[7]=fout7, out[8]=fout8, out[9]=fout9, out[10]=fout10, out[11]=fout11, out[12]=fout12, out[13]=fout13, out[14]=fout14, out[15]=fout15);  //xy if f is 0
	
	Not16(in[0]=fout0,in[1]=fout1,in[2]=fout2,in[3]=fout3,in[4]=fout4,in[5]=fout5,in[6]=fout6,in[7]=fout7,in[8]=fout8,in[9]=fout9,in[10]=fout10,in[11]=fout11,in[12]=fout12,in[13]=fout13,in[14]=fout14,in[15]=fout15, out[0]=notfout0, out[1]=notfout1, out[2]=notfout2, out[3]=notfout3, out[4]=notfout4, out[5]=notfout5, out[6]=notfout6, out[7]=notfout7, out[8]=notfout8, out[9]=notfout9, out[10]=notfout10, out[11]=notfout11, out[12]=notfout12, out[13]=notfout13, out[14]=notfout14, out[15]=notfout15);  //not fout for last mux
	
	Mux16(a[0]=fout0,a[1]=fout1,a[2]=fout2,a[3]=fout3,a[4]=fout4,a[5]=fout5,a[6]=fout6,a[7]=fout7,a[8]=fout8,a[9]=fout9,a[10]=fout10,a[11]=fout11,a[12]=fout12,a[13]=fout13,a[14]=fout14,a[15]=fout15, b[0]=notfout0, b[1]=notfout1, b[2]=notfout2,b[3]=notfout3,b[4]=notfout4,b[5]=notfout5,b[6]=notfout6,b[7]=notfout7,b[8]=notfout8,b[9]=notfout9,b[10]=notfout10,b[11]=notfout11,b[12]=notfout12,b[13]=notfout13,b[14]=notfout14,b[15]=notfout15, sel=no, out=out);
	
	//find ng
	Mux(a=fout15,b=notfout15, sel=no, out=ngg);  //compare most significant digit to see if negative. ngg==out[15]
	And(a=ngg, b=ngg, out=ng);  //if ng is one, out is negative, so ng is one
	
	//find zr 
    //outs for finding zr	
	Mux16(a[0]=fout0,a[1]=fout1,a[2]=fout2,a[3]=fout3,a[4]=fout4,a[5]=fout5,a[6]=fout6,a[7]=fout7,a[8]=fout8,a[9]=fout9, a[10]=fout10,a[11]=fout11,a[12]=fout12,a[13]=fout13,a[14]=fout14,a[15]=fout15, b[0]=notfout0, b[1]=notfout1, b[2]=notfout2,b[3]=notfout3,b[4]=notfout4,b[5]=notfout5,b[6]=notfout6,b[7]=notfout7,b[8]=notfout8, b[9]=notfout9,b[10]=notfout10,b[11]=notfout11,b[12]=notfout12,b[13]=notfout13,b[14]=notfout14,b[15]=notfout15, sel=no, out[0]=out0, out[1]=out1, out[2]=out2, out[3]=out3, out[4]=out4, out[5]=out5, out[6]=out6,out[7]=out7,out[8]=out8,out[9]=out9,out[10]=out10,out[11]=out11,out[12]=out12, out[13]=out13,out[14]=out14,out[15]=out15);  
	
    Or16Way(in[0]=out0, in[1]=out1, in[2]=out2, in[3]=out3, in[4]=out4, in[5]=out5, in[6]=out6, in[7]=out7, in[8]=out8, in[9]=out9, in[10]=out10, in[11]=out11, in[12]=out12, in[13]=out13, in[14]=out14, in[15]=out15, out=notzr);
	Not(in=notzr, out=zr);
}